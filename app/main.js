const express = require('express');
const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');

// Express Ë®≠ÂÆö
const app = express();
const PORT = process.env.PORT || 3000;

console.log('üöÄ DiscordÈ†ªÈÅìÁõ£Êéß + Family ClubÂçöÂÆ¢Áõ£ÊéßÊ©üÂô®‰∫∫ÂïüÂãï‰∏≠...');
console.log('üì± InstagramÁõ£ÊéßÂ∑≤ËΩâÁßªËá≥CloudPhone (24/7Â§ñÈÉ®Áõ£Êéß)');
console.log('üì∫ DiscordÈ†ªÈÅìÁõ£Êéß + üìù Family ClubÂçöÂÆ¢Áõ£Êéß');

// === Áí∞Â¢ÉËÆäÊï∏Ê™¢Êü• ===
const requiredEnvVars = [
    'DISCORD_TOKEN', 
    'NOTIFICATION_CHANNEL_ID'
];

// DiscordÁõ£ÊéßÈÖçÁΩÆÔºàÂøÖË¶ÅÔºâ
let discordChannelConfigs = {};
if (process.env.CHANNEL_CONFIGS) {
    try {
        discordChannelConfigs = JSON.parse(process.env.CHANNEL_CONFIGS);
        console.log('üìã DiscordÈ†ªÈÅìÁõ£ÊéßÈÖçÁΩÆËºâÂÖ•:', Object.keys(discordChannelConfigs).length, 'ÂÄãÈ†ªÈÅì');
        
        // È©óË≠âÊØèÂÄãÈ†ªÈÅìÈÖçÁΩÆ
        for (const [channelId, channelConfig] of Object.entries(discordChannelConfigs)) {
            if (!channelConfig.keywords || !Array.isArray(channelConfig.keywords)) {
                console.error(`‚ùå È†ªÈÅì ${channelId} ÁöÑ keywords Ë®≠ÂÆöÈåØË™§ÔºåÂøÖÈ†àÊòØÈô£Âàó`);
                process.exit(1);
            }
            if (!channelConfig.message) {
                console.error(`‚ùå È†ªÈÅì ${channelId} Áº∫Â∞ë message Ë®≠ÂÆö`);
                process.exit(1);
            }
            
            if (channelConfig.api_key && channelConfig.phone_number) {
                if (!channelConfig.caller_id) {
                    console.warn(`‚ö†Ô∏è È†ªÈÅì ${channelId} Áº∫Â∞ë caller_idÔºåÂ∞á‰ΩøÁî®È†êË®≠ÂÄº '1'`);
                    channelConfig.caller_id = '1';
                }
                console.log(`üìû È†ªÈÅì ${channelId} ÈõªË©±ÈÖçÁΩÆ:`);
                console.log(`   API Key: ${channelConfig.api_key.substring(0, 8)}****`);
                console.log(`   ‰æÜÈõªÈ°ØÁ§∫ID: ${channelConfig.caller_id}`);
                console.log(`   ÈÄöÁü•ËôüÁ¢º: ${channelConfig.phone_number}`);
            }
            
            console.log(`‚úÖ È†ªÈÅì ${channelId} (${channelConfig.name || 'Êú™ÂëΩÂêç'}) ÈÖçÁΩÆÊúâÊïà`);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è DiscordÈ†ªÈÅìÈÖçÁΩÆËß£ÊûêÂ§±ÊïóÔºåÂ∞áÂè™ÈÅãË°åÂçöÂÆ¢Áõ£Êéß');
        console.warn('ÈåØË™§Ë©≥ÊÉÖ:', error.message);
    }
} else {
    console.log('üìã Êú™ÈÖçÁΩÆDiscordÈ†ªÈÅìÁõ£Êéß (CHANNEL_CONFIGS Êú™Ë®≠ÂÆö)');
}

const DynamicInstagramMonitor = require('./instagram_dynamic_monitor');

// === Instagram Áõ£ÊéßÈÖçÁΩÆ ===
const instagramConfig = {
    username: process.env.INSTAGRAM_TARGET_USERNAME,
    sessionFile: process.env.INSTAGRAM_SESSION_FILE || './instagram_session.json',
    mode1Interval: process.env.INSTAGRAM_MODE1_INTERVAL || '600', // 10ÂàÜÈêò
    triggerChannels: process.env.INSTAGRAM_TRIGGER_CHANNELS ? 
        process.env.INSTAGRAM_TRIGGER_CHANNELS.split(',') : []
};

let instagramMonitor = null;

// ÂàùÂßãÂåñ Instagram Áõ£Êéß
if (instagramConfig.username) {
    instagramMonitor = new DynamicInstagramMonitor(
        instagramConfig,
        async (message, type, source) => {
            await sendNotification(message, type, source || 'Instagram');
        }
    );
    
    console.log('üì∏ InstagramÂãïÊÖãÁõ£ÊéßÁ≥ªÁµ±Â∑≤ÂàùÂßãÂåñ');
    console.log(`üéØ ÁõÆÊ®ôÁî®Êà∂: @${instagramConfig.username}`);
    console.log(`üì∫ Ëß∏ÁôºÈ†ªÈÅì: ${instagramConfig.triggerChannels.length} ÂÄã`);
} else {
    console.log('‚ö†Ô∏è InstagramÁõ£ÊéßÊú™ÈÖçÁΩÆ (INSTAGRAM_TARGET_USERNAME Êú™Ë®≠ÂÆö)');
}

// === Âú® Discord ready ‰∫ã‰ª∂‰∏≠ÂïüÂãï Mode1 ===
client.once('ready', async () => {
    unifiedState.botReady = true;
    startBlogMonitoring();
    
    // ÂïüÂãï Instagram Mode1 Áõ£Êéß
    if (instagramMonitor) {
        await instagramMonitor.startMode1();
    }
    
    console.log(`‚úÖ Discord Bot Â∑≤‰∏äÁ∑ö: ${client.user.tag}`);
    console.log(`üìã DiscordÈ†ªÈÅìÁõ£Êéß: ${Object.keys(config.CHANNEL_CONFIGS).length} ÂÄãÈ†ªÈÅì`);
    console.log(`üì∏ InstagramÁõ£Êéß: ${instagramConfig.username ? '‚úÖ Â∑≤ÂïüÂãï' : '‚ùå Êú™ÈÖçÁΩÆ'}`);
    console.log(`üïê Áï∂ÂâçÊó•Êú¨ÊôÇÈñì: ${new Date().toLocaleString('zh-TW', { timeZone: 'Asia/Tokyo' })}`);
    
    // ÁôºÈÄÅÂïüÂãïÈÄöÁü•
    sendNotification(`üöÄ **Áµ±‰∏ÄÁõ£ÊéßÊ©üÂô®‰∫∫Â∑≤ÂïüÂãï** (Êó•Êú¨ÊôÇÈñì)

**DiscordÈ†ªÈÅìÁõ£Êéß:** ${Object.keys(config.CHANNEL_CONFIGS).length} ÂÄãÈ†ªÈÅì
**ÂçöÂÆ¢Áõ£Êéß:** ${config.BLOG_NOTIFICATION_CHANNEL_ID ? '‚úÖ Family Club È´òÊú®ÈõÑ‰πü' : '‚ùå Êú™ÈÖçÁΩÆ'}
**InstagramÁõ£Êéß:** ${instagramConfig.username ? `‚úÖ @${instagramConfig.username}` : '‚ùå Êú™ÈÖçÁΩÆ'}
**ÈõªË©±ÈÄöÁü•:** ${config.PUSHCALL_API_KEY ? '‚úÖ Â∑≤ÈÖçÁΩÆ' : '‚ùå Êú™ÈÖçÁΩÆ'}

üì∏ **InstagramÊ®°ÂºèË™™Êòé:**
‚Ä¢ Mode1: 24/7 Âü∫Á§éÁõ£Êéß (Ë≤ºÊñá„ÄÅBio)
‚Ä¢ Mode2: ÊåâÈúÄÈÄ≤ÈöéÁõ£Êéß (StoryÂÇô‰ªΩÁ≠â)
`, 'info', 'System');
});

// === Discord Ë®äÊÅØÁõ£ËÅΩ - Ê∑ªÂä† Instagram Ëß∏ÁôºÂô®ËôïÁêÜ ===
client.on('messageCreate', async (message) => {
    try {
        unifiedState.discord.totalMessagesProcessed++;
        
        if (message.author.bot && message.author.id === client.user.id) return;
        
        // ËôïÁêÜÂëΩ‰ª§
        if (message.content.startsWith('!')) {
            await handleDiscordCommands(message);
            return;
        }
        
        // Instagram Ëß∏ÁôºÂô®Ê™¢Êü•
        if (instagramMonitor && instagramConfig.triggerChannels.includes(message.channel.id)) {
            await handleInstagramTriggers(message);
        }
        
        // ÂéüÊúâÁöÑÈ†ªÈÅìÁõ£ÊéßÈÇèËºØ
        const channelId = message.channel.id;
        if (!config.CHANNEL_CONFIGS[channelId]) return;
        
        // ... ÂéüÊúâÁöÑÈ†ªÈÅìÁõ£Êéß‰ª£Á¢º ...
        
    } catch (error) {
        console.error('‚ùå [DiscordË®äÊÅØËôïÁêÜ] ÈåØË™§:', error.message);
    }
});

// === Instagram Ëß∏ÁôºÂô®ËôïÁêÜÂáΩÊï∏ ===
async function handleInstagramTriggers(message) {
    const content = message.content.toLowerCase();
    
    // Story Ëß∏ÁôºÂô®
    if (content.includes('story') || content.includes('ÈôêÊôÇÂãïÊÖã')) {
        console.log('üîî [InstagramËß∏ÁôºÂô®] Ê™¢Ê∏¨Âà∞StoryÈóúÈçµÂ≠ó');
        const success = await instagramMonitor.handleDiscordTrigger(message, 'story_alert');
        if (success) {
            await message.react('üì±');
        }
        return;
    }
    
    // Áõ¥Êí≠Ëß∏ÁôºÂô®
    if (content.includes('live') || content.includes('Áõ¥Êí≠') || content.includes('went live')) {
        console.log('üî¥ [InstagramËß∏ÁôºÂô®] Ê™¢Ê∏¨Âà∞Áõ¥Êí≠ÈóúÈçµÂ≠ó');
        const success = await instagramMonitor.handleDiscordTrigger(message, 'live_alert');
        if (success) {
            await message.react('üî¥');
        }
        return;
    }
    
    // Á∑äÊÄ•Ëß∏ÁôºÂô®Ôºà‰æãÂ¶ÇÁâπÂÆöÁî®Êà∂ÁôºÈÄÅÁâπÊÆäË®äÊÅØÔºâ
    if (content.includes('igÁ∑äÊÄ•') || content.includes('instagramÁ∑äÊÄ•')) {
        console.log('üö® [InstagramËß∏ÁôºÂô®] Ê™¢Ê∏¨Âà∞Á∑äÊÄ•Ëß∏Áôº');
        const success = await instagramMonitor.startMode2('Á∑äÊÄ•Ëß∏Áôº');
        if (success) {
            await message.react('üö®');
        }
        return;
    }
}

// ÂçöÂÆ¢Áõ£ÊéßÈÖçÁΩÆ
const BLOG_NOTIFICATION_CHANNEL_ID = process.env.BLOG_NOTIFICATION_CHANNEL_ID;
if (BLOG_NOTIFICATION_CHANNEL_ID) {
    console.log('üìù Family ClubÂçöÂÆ¢Áõ£ÊéßÂ∑≤ÂïüÁî®');
} else {
    console.log('üìù ÂçöÂÆ¢Áõ£ÊéßÊú™ÈÖçÁΩÆ (BLOG_NOTIFICATION_CHANNEL_ID Êú™Ë®≠ÂÆö)');
}

const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingVars.length > 0) {
    console.error('‚ùå Áº∫Â∞ëÂøÖË¶ÅÁí∞Â¢ÉËÆäÊï∏:', missingVars.join(', '));
    process.exit(1);
}

// === ÈÖçÁΩÆÊï¥Âêà ===
const config = {
    DISCORD_TOKEN: process.env.DISCORD_TOKEN,
    NOTIFICATION_CHANNEL_ID: process.env.NOTIFICATION_CHANNEL_ID,
    CHANNEL_CONFIGS: discordChannelConfigs,
    PUSHCALL_API_KEY: process.env.PUSHCALL_API_KEY,
    PUSHCALL_FROM: process.env.PUSHCALL_FROM,
    PUSHCALL_TO: process.env.PUSHCALL_TO,
    BLOG_NOTIFICATION_CHANNEL_ID: process.env.BLOG_NOTIFICATION_CHANNEL_ID,
    CLOUDPHONE_NOTIFICATION_CHANNEL: process.env.CLOUDPHONE_NOTIFICATION_CHANNEL || null
};

// === Áµ±‰∏ÄÁãÄÊÖãÁÆ°ÁêÜ ===
let unifiedState = {
    startTime: Date.now(),
    botReady: false,
    cloudphone: {
        configured: !!config.CLOUDPHONE_NOTIFICATION_CHANNEL,
        channelId: config.CLOUDPHONE_NOTIFICATION_CHANNEL,
        lastNotification: null,
        totalNotifications: 0
    },
    discord: {
        totalMessagesProcessed: 0,
        channelStats: {},
        lastDetections: [],
        apiUsage: {}
    },
    blog: {
        isMonitoring: false,
        totalChecks: 0,
        articlesFound: 0,
        lastCheck: null
    },
    notifications: {
        discordMessages: 0,
        phoneCallsMade: 0,
        lastNotification: null
    }
};

// ÂàùÂßãÂåñDiscordÈ†ªÈÅìÁµ±Ë®à
for (const [channelId, channelConfig] of Object.entries(config.CHANNEL_CONFIGS)) {
    unifiedState.discord.channelStats[channelId] = {
        messagesProcessed: 0,
        keywordsDetected: 0,
        callsMade: 0,
        lastDetection: null,
        lastCallSuccess: null,
        lastCallError: null
    };
    
    const apiKey = channelConfig.api_key ? channelConfig.api_key.substring(0, 8) : 'default';
    if (!unifiedState.discord.apiUsage[apiKey]) {
        unifiedState.discord.apiUsage[apiKey] = {
            totalCalls: 0,
            successCalls: 0,
            failedCalls: 0,
            lastUsed: null,
            phoneNumbers: new Set()
        };
    }
    if (channelConfig.phone_number) {
        unifiedState.discord.apiUsage[apiKey].phoneNumbers.add(channelConfig.phone_number);
    }
}

// === Discord Client Ë®≠ÂÆö ===
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// === ÂçöÂÆ¢Áõ£ÊéßÁ≥ªÁµ± ===
let blogMonitor = null;

async function startBlogMonitoring() {
    if (!BLOG_NOTIFICATION_CHANNEL_ID) {
        console.log('‚ö†Ô∏è [Blog] Êú™ÈÖçÁΩÆÈÄöÁü•È†ªÈÅìÔºåË∑≥ÈÅéÂçöÂÆ¢Áõ£Êéß');
        return;
    }

    try {
        // ‰ΩøÁî®Êñ∞ÁöÑÁúüÊ≠£APIÁõ£ÊéßÂô®
        const FamilyClubBlogMonitor = require('./family_club_blog_monitor');
        
        blogMonitor = new FamilyClubBlogMonitor(async (message, type, source) => {
            try {
                const channel = await client.channels.fetch(BLOG_NOTIFICATION_CHANNEL_ID);
                await channel.send(message);
                console.log(`üì§ [${source}] ÂçöÂÆ¢ÈÄöÁü•Â∑≤ÁôºÈÄÅ: ${type}`);
            } catch (error) {
                console.error('‚ùå ÂçöÂÆ¢ÈÄöÁü•ÁôºÈÄÅÂ§±Êïó:', error.message);
            }
        });
        
        blogMonitor.startMonitoring();
        console.log('üöÄ [Blog] Family Club ÂçöÂÆ¢Áõ£ÊéßÂ∑≤ÂïüÂãï');
        console.log('üéØ [Blog] Áõ£ÊéßÊ®°Âºè: ÁúüÊ≠£ÁöÑAPIÁ´ØÈªû (diarkiji_list)');
        console.log('üîó [Blog] APIÁ´ØÈªû: https://web.familyclub.jp/s/jwb/api/list/diarkiji_list?code=F2017&so=JW5&page=0');
        console.log('‚è∞ [Blog] Ê™¢Êü•È†ªÁéá: ÊØèÂ∞èÊôÇ00ÂàÜ');
        
    } catch (error) {
        console.error('‚ùå [Blog] ÂçöÂÆ¢Áõ£ÊéßÂïüÂãïÂ§±Êïó:', error.message);
    }
}

// Áµ±‰∏ÄÈÄöÁü•ÂáΩÊï∏
async function sendNotification(message, type = 'info', source = 'system') {
    try {
        const channel = await client.channels.fetch(config.NOTIFICATION_CHANNEL_ID);
        if (message.length > 1900) message = message.substring(0, 1900) + '...(truncated)';
        
        await channel.send(message);
        unifiedState.notifications.discordMessages++;
        unifiedState.notifications.lastNotification = new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' });
        
        console.log(`üì§ [${source}] DiscordÈÄöÁü•Â∑≤ÁôºÈÄÅ: ${type}`);
        
        if (type === 'live_alert' && source === 'Discord' && config.PUSHCALL_API_KEY) {
            await makePhoneCall(`InstagramÁõ¥Êí≠ÈñãÂßã‰∫ÜÔºÅ`, source);
        }
    } catch (error) {
        console.error('‚ùå DiscordÈÄöÁü•ÁôºÈÄÅÂ§±Êïó:', error.message);
    }
}

// ÈõªË©±ÈÄöÁü•ÂáΩÊï∏
async function makePhoneCall(message, source = 'system') {
    if (!config.PUSHCALL_API_KEY || !config.PUSHCALL_TO) {
        console.log('üìû ÈõªË©±ÈÄöÁü•Êú™ÈÖçÁΩÆÔºåË∑≥ÈÅé');
        return;
    }
    
    try {
        const apiUrl = new URL('https://pushcall.me/api/call');
        apiUrl.searchParams.append('api_key', config.PUSHCALL_API_KEY);
        apiUrl.searchParams.append('from', config.PUSHCALL_FROM || '1');
        apiUrl.searchParams.append('to', config.PUSHCALL_TO.replace('+', ''));
        
        const response = await axios.get(apiUrl.toString(), { timeout: 30000 });
        
        if (response.status === 200) {
            unifiedState.notifications.phoneCallsMade++;
            console.log(`‚úÖ [${source}] ÈõªË©±ÈÄöÁü•Êí•ÊâìÊàêÂäü`);
        }
    } catch (error) {
        console.error(`‚ùå [${source}] ÈõªË©±ÈÄöÁü•Â§±Êïó:`, error.message);
    }
}

// Discord ready ‰∫ã‰ª∂ËôïÁêÜ
client.once('ready', () => {
    unifiedState.botReady = true;
    startBlogMonitoring();
    console.log(`‚úÖ Discord Bot Â∑≤‰∏äÁ∑ö: ${client.user.tag}`);
    console.log(`üìã DiscordÈ†ªÈÅìÁõ£Êéß: ${Object.keys(config.CHANNEL_CONFIGS).length} ÂÄãÈ†ªÈÅì`);
    console.log(`üïê Áï∂ÂâçÊó•Êú¨ÊôÇÈñì: ${new Date().toLocaleString('zh-TW', { timeZone: 'Asia/Tokyo' })}`);
    
    // ÁôºÈÄÅÂïüÂãïÈÄöÁü•Ôºà‰øÆÊîπÁâàÊú¨Ôºâ
    sendNotification(`üöÄ **Áµ±‰∏ÄÁõ£ÊéßÊ©üÂô®‰∫∫Â∑≤ÂïüÂãï** (Êó•Êú¨ÊôÇÈñì)

**DiscordÈ†ªÈÅìÁõ£Êéß:** ${Object.keys(config.CHANNEL_CONFIGS).length} ÂÄãÈ†ªÈÅì
**ÂçöÂÆ¢Áõ£Êéß:** ${config.BLOG_NOTIFICATION_CHANNEL_ID ? '‚úÖ Family Club È´òÊú®ÈõÑ‰πü' : '‚ùå Êú™ÈÖçÁΩÆ'}
**ÈõªË©±ÈÄöÁü•:** ${config.PUSHCALL_API_KEY ? '‚úÖ Â∑≤ÈÖçÁΩÆ' : '‚ùå Êú™ÈÖçÁΩÆ'}
`, 'info', 'System');
    
})

    // ÂàùÂßãÂåñWebÁãÄÊÖãÈù¢Êùø
    setTimeout(() => {
        console.log('üîÑ [WebÈù¢Êùø] ÈñãÂßãÂàùÂßãÂåñÁãÄÊÖãÈù¢Êùø...');
        initializeWebStatusPanel();
    }, 3000);
;

// DiscordÊ∂àÊÅØÁõ£ËÅΩ
client.on('messageCreate', async (message) => {
    try {
        unifiedState.discord.totalMessagesProcessed++;
        
        if (message.author.bot && message.author.id === client.user.id) return;
        
        if (message.content.startsWith('!')) {
            await handleDiscordCommands(message);
            return;
        }
        
        const channelId = message.channel.id;
        if (!config.CHANNEL_CONFIGS[channelId]) return;
        
        const channelConfig = config.CHANNEL_CONFIGS[channelId];
        const messageContent = message.content.toLowerCase();
        
        unifiedState.discord.channelStats[channelId].messagesProcessed++;
        
        let foundKeyword = null;
        for (const keyword of channelConfig.keywords) {
            if (messageContent.includes(keyword.toLowerCase())) {
                foundKeyword = keyword;
                break;
            }
        }
        
        if (foundKeyword) {
            unifiedState.discord.channelStats[channelId].keywordsDetected++;
            unifiedState.discord.channelStats[channelId].lastDetection = new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' });
            
            console.log(`üîî [DiscordÈ†ªÈÅìÁõ£Êéß] Ê™¢Ê∏¨Âà∞ÈóúÈçµÂ≠ó: "${foundKeyword}"`);
            
            const detection = {
                ÊôÇÈñì: new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' }),
                È†ªÈÅì: channelConfig.name || channelId,
                ÈóúÈçµÂ≠ó: foundKeyword,
                Ë®äÊÅØ: message.content.substring(0, 150),
                ‰ΩúËÄÖ: message.author.username
            };
            unifiedState.discord.lastDetections.push(detection);
            
            if (channelConfig.api_key && channelConfig.phone_number) {
                await callChannelSpecificAPI(channelId, channelConfig, foundKeyword, message.content);
            }

            // Êñ∞Â¢ûÔºöÁôºÈÄÅËá™ÂÆöÁæ©ÈÄöÁü•Ë®äÊÅØÂà∞‰∏ªÈÄöÁü•È†ªÈÅì
            if (channelConfig.message) {
                const customMessage = channelConfig.message
                    .replace('{keyword}', foundKeyword)
                    .replace('{channel}', channelConfig.name || channelId)
                    .replace('{author}', message.author.username)
                    .replace('{time}', new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' }));
                
                await sendNotification(customMessage, 'live_alert', 'Discord');
            }
            
            // Êí•ÊâìÈ†ªÈÅìÂ∞àÁî®ÈõªË©±
            if (channelConfig.api_key && channelConfig.phone_number) {
                await callChannelSpecificAPI(channelId, channelConfig, foundKeyword, message.content);
            }
        }
        
    } catch (error) {
        console.error('‚ùå [DiscordÊ∂àÊÅØËôïÁêÜ] ÈåØË™§:', error.message);
    }
});

// DiscordÂëΩ‰ª§ËôïÁêÜ
async function handleDiscordCommands(message) {
    const cmd = message.content.toLowerCase();
    
    if (cmd === '!status') {
        const runtime = Math.round((Date.now() - unifiedState.startTime) / 60000);
        const blogStatus = blogMonitor ? blogMonitor.getStatus() : { isMonitoring: false };
        const instagramStatus = instagramMonitor ? instagramMonitor.getStatus() : null;
        
        const statusMsg = `üìä **Á≥ªÁµ±ÁãÄÊÖã** \`${Math.floor(runtime / 60)}h ${runtime % 60}m\`

ü§ñ **Bot**: ${unifiedState.botReady ? '‚úÖ Âú®Á∑ö' : '‚ùå Èõ¢Á∑ö'}
üìù **ÂçöÂÆ¢**: ${blogStatus.isMonitoring ? '‚úÖ ÈÅãË°å‰∏≠' : '‚ùå ÂÅúÊ≠¢'} (\`${blogStatus.totalChecks}\` Ê¨°Ê™¢Êü•)
üì∏ **Instagram**: ${instagramStatus ? 
    `Mode1: ${instagramStatus.mode1.ÈÅãË°åÁãÄÊÖã} | Mode2: ${instagramStatus.mode2.ÈÅãË°åÁãÄÊÖã}` : 
    '‚ùå Êú™ÈÖçÁΩÆ'}
üí¨ **Discord**: \`${Object.keys(config.CHANNEL_CONFIGS).length}\` ÂÄãÈ†ªÈÅìÁõ£Êéß
üìû **ÈÄöÁü•**: \`${unifiedState.notifications.phoneCallsMade}\` Ê¨°ÈõªË©±ÈÄöÁü•

üåê WebÈù¢Êùø: https://tame-amalee-k-326-34061d70.koyeb.app/`;

        await message.reply(statusMsg);
    }
    
    // Instagram Â∞àÁî®ÂëΩ‰ª§
    else if (cmd === '!ig-status') {
        if (instagramMonitor) {
            const status = instagramMonitor.getStatus();
            const statusMsg = `üì∏ **Instagram Áõ£ÊéßË©≥Á¥∞ÁãÄÊÖã**

**üîÑ Mode1 (24/7 Âü∫Á§éÁõ£Êéß)**
‚Ä¢ ÁãÄÊÖã: ${status.mode1.ÈÅãË°åÁãÄÊÖã}
‚Ä¢ ÂïüÂãïÊôÇÈñì: ${status.mode1.ÂïüÂãïÊôÇÈñì || 'Êú™ÂïüÂãï'}
‚Ä¢ Ê™¢Êü•Ê¨°Êï∏: ${status.mode1.Á∏ΩÊ™¢Êü•Ê¨°Êï∏}
‚Ä¢ Ê™¢Ê∏¨Ë≤ºÊñá: ${status.mode1.Ê™¢Ê∏¨Âà∞ÁöÑË≤ºÊñá}
‚Ä¢ BioËÆäÊõ¥: ${status.mode1.bioËÆäÊõ¥Ê¨°Êï∏}
‚Ä¢ ÊúÄÂæåÊ™¢Êü•: ${status.mode1.ÊúÄÂæåÊ™¢Êü•ÊôÇÈñì || 'Â∞öÊú™Ê™¢Êü•'}

**üî• Mode2 (ÊåâÈúÄÈÄ≤ÈöéÁõ£Êéß)**
‚Ä¢ ÁãÄÊÖã: ${status.mode2.ÈÅãË°åÁãÄÊÖã}
‚Ä¢ ÂÜ∑ÂçªÁãÄÊÖã: ${status.mode2.ÂÜ∑ÂçªÁãÄÊÖã}
‚Ä¢ ÂïüÂãïÊ¨°Êï∏: ${status.mode2.ÂïüÂãïÊ¨°Êï∏}
‚Ä¢ StoryÂÇô‰ªΩ: ${status.mode2.storyÂÇô‰ªΩÊ¨°Êï∏}
‚Ä¢ ÊúÄÂæåÂïüÂãï: ${status.mode2.ÊúÄÂæåÂïüÂãïÊôÇÈñì || 'ÂæûÊú™ÂïüÂãï'}
‚Ä¢ ‰∏ãÊ¨°ÂèØÁî®: ${status.mode2.‰∏ãÊ¨°ÂèØÁî®ÊôÇÈñì || 'Á´ãÂç≥ÂèØÁî®'}

**üîê ÁôªÂÖ•ÊÜëË≠â**
‚Ä¢ ÁãÄÊÖã: ${status.ÁôªÂÖ•ÊÜëË≠â.ÁãÄÊÖã}
‚Ä¢ ÊúÄÂæåÊ™¢Êü•: ${status.ÁôªÂÖ•ÊÜëË≠â.ÊúÄÂæåÊ™¢Êü• || 'Êú™Ê™¢Êü•'}
‚Ä¢ ÈåØË™§Ê¨°Êï∏: ${status.ÁôªÂÖ•ÊÜëË≠â.ÈåØË™§Ê¨°Êï∏}

**üéØ Áõ£ÊéßÁõÆÊ®ô**: @${status.ÁõÆÊ®ôÁî®Êà∂}
**‚è∞ Áï∂ÂâçÊôÇÈñì**: ${status.Áï∂ÂâçÊôÇÈñì}`;

            await message.reply(statusMsg);
        } else {
            await message.reply('‚ùå InstagramÁõ£ÊéßÊú™ÂïüÁî®');
        }
    }
    
    else if (cmd === '!ig-mode2') {
        if (instagramMonitor) {
            const success = await instagramMonitor.handleDiscordTrigger(message, 'manual_command');
            if (success) {
                await message.reply('‚úÖ **Mode2 Â∑≤ÊâãÂãïÂïüÂãï**');
            } else {
                await message.reply('‚ùå **Mode2 ÂïüÂãïÂ§±Êïó** (ÂèØËÉΩÂú®ÂÜ∑Âçª‰∏≠ÊàñÊÜëË≠âÁÑ°Êïà)');
            }
        } else {
            await message.reply('‚ùå InstagramÁõ£ÊéßÊú™ÂïüÁî®');
        }
    }
    
    else if (cmd === '!ig-stop-mode2') {
        if (instagramMonitor && instagramMonitor.isMode2Running) {
            instagramMonitor.stopMode2(false);
            await message.reply('üõë **Mode2 Â∑≤ÊâãÂãïÂÅúÊ≠¢**');
        } else {
            await message.reply('‚ùå Mode2 Êú™Âú®ÈÅãË°å');
        }
    }
    
    else if (cmd === '!ig-restart') {
        if (instagramMonitor) {
            await message.reply('üîÑ **ÈáçÊñ∞ÂïüÂãïInstagramÁõ£Êéß...**');
            await instagramMonitor.stopAll();
            
            // Á≠âÂæÖ3ÁßíÂæåÈáçÊñ∞ÂïüÂãï
            setTimeout(async () => {
                await instagramMonitor.startMode1();
                await message.channel.send('‚úÖ **InstagramÁõ£ÊéßÈáçÊñ∞ÂïüÂãïÂÆåÊàê**');
            }, 3000);
        } else {
            await message.reply('‚ùå InstagramÁõ£ÊéßÊú™ÂïüÁî®');
        }
    }
    
    else if (cmd === '!ig-test-session') {
        if (instagramMonitor) {
            await message.reply('üîç **Ê™¢Êü•ÁôªÂÖ•ÊÜëË≠âÁãÄÊÖã...**');
            const sessionValid = await instagramMonitor.checkSessionCredentials();
            
            const statusMsg = sessionValid ? 
                '‚úÖ **ÁôªÂÖ•ÊÜëË≠âÊúâÊïà**\nMode2 ÂäüËÉΩÂèØÊ≠£Â∏∏‰ΩøÁî®' : 
                '‚ùå **ÁôªÂÖ•ÊÜëË≠âÁÑ°Êïà**\nÈúÄË¶ÅÈáçÊñ∞ÁôªÂÖ•ÊâçËÉΩ‰ΩøÁî®Mode2ÂäüËÉΩ';
                
            await message.reply(statusMsg);
        } else {
            await message.reply('‚ùå InstagramÁõ£ÊéßÊú™ÂïüÁî®');
        }
    }
    
    // ÂçöÂÆ¢Áõ£ÊéßÂëΩ‰ª§
    else if (cmd === '!blog-status') {
        if (blogMonitor) {
            const blogStatus = blogMonitor.getStatus();
            const latestRecord = blogMonitor.getLatestRecord();
            
            const statusMsg = `üìù **Family Club ÂçöÂÆ¢Áõ£ÊéßÁãÄÊÖã** (${blogStatus.artistName})

    **Áõ£ÊéßÁãÄÊÖã:** ${blogStatus.isMonitoring ? '‚úÖ ÈÅãË°å‰∏≠' : '‚ùå Â∑≤ÂÅúÊ≠¢'}
    **ÁõÆÊ®ôËóù‰∫∫:** ${blogStatus.artistName} (${blogStatus.artistCode})
    **APIÁ´ØÈªû:** Family Club ÂÆòÊñπAPI
    **ÂçöÂÆ¢Á∂≤ÂùÄ:** ${blogStatus.blogUrl}

    **Ê™¢Êü•Áµ±Ë®à:**
    ‚Ä¢ Á∏ΩÊ™¢Êü•Ê¨°Êï∏: ${blogStatus.totalChecks}
    ‚Ä¢ ÁôºÁèæÊñ∞ÊñáÁ´†: ${blogStatus.articlesFound} ÁØá
    ‚Ä¢ ÊúÄÂæåÊ™¢Êü•: ${blogStatus.lastCheckTime || 'Â∞öÊú™Ê™¢Êü•'}
    ‚Ä¢ ‰∏ãÊ¨°Ê™¢Êü•: ${blogStatus.nextCheckTime || 'Êú™ÂÆâÊéí'}

    **Áõ£ÊéßÊôÇÁ®ã:**
    ‚Ä¢ Ê¥ªË∫çÊôÇÊÆµ: ${blogStatus.activeTimeSchedule}
    ‚Ä¢ Áï∂ÂâçÊòØÊ¥ªË∫çÊôÇÊÆµ: ${blogStatus.currentActiveTime ? '‚úÖ ÊòØ' : '‚ùå Âê¶'}
    ‚Ä¢ Êó•Êú¨ÊôÇÈñì: ${blogStatus.japanTime}

    **Áï∂ÂâçË®òÈåÑÁöÑÊúÄÊñ∞ÊñáÁ´†:**
    ${latestRecord ? `üìÑ ÊñáÁ´†‰ª£Á¢º: ${latestRecord.articleCode}
    üóìÔ∏è ÁôºÂ∏ÉÊôÇÈñì: ${latestRecord.datetime}
    üìù Ê®ôÈ°å: ${latestRecord.title}
    üìù DiaryÂêçÁ®±: ${latestRecord.diaryName}
    ${latestRecord.url ? `üîó ÈÄ£Áµê: ${latestRecord.url}` : ''}
    ‚è∞ Ë®òÈåÑÊõ¥Êñ∞: ${latestRecord.lastUpdated}` : '‚ùå Â∞öÊú™Âª∫Á´ãË®òÈåÑ'}

    üí° **Áõ£ÊéßÈÇèËºØ:**
    ‚Ä¢ Êó•Êú¨ÊôÇÈñì12:00-23:59ÊØèÂ∞èÊôÇ00ÂàÜÊ™¢Êü•
    ‚Ä¢ ÊØîËºÉÊñáÁ´†‰ª£Á¢ºÂíåÁôºÂ∏ÉÊôÇÈñì
    ‚Ä¢ ÁôºÁèæÊñ∞ÊñáÁ´†Ëá™ÂãïÁôºÈÄÅÈÄöÁü•`;

            await message.reply(statusMsg);
        } else {
            await message.reply('‚ùå ÂçöÂÆ¢Áõ£ÊéßÊú™ÂïüÁî®');
        }
    }

    else if (cmd === '!blog-test') {
        if (blogMonitor) {
            await message.reply('üîç Âü∑Ë°åÂçöÂÆ¢APIÈÄ£Êé•Ê∏¨Ë©¶...');
            try {
                const testResult = await blogMonitor.testWebsiteAccess();
                
                if (testResult.success) {
                    const testMsg = `‚úÖ **ÂçöÂÆ¢APIÈÄ£Êé•Ê∏¨Ë©¶ÊàêÂäü**

    üîß **Ê™¢Ê∏¨ÊñπÂºè:** ${testResult.method}
    üé≠ **ÁõÆÊ®ôËóù‰∫∫:** ${testResult.artistName} (${testResult.artistCode})
    üì° **APIÁ´ØÈªû:** ${testResult.endpoint}
    üì∞ **ÊâæÂà∞ÊñáÁ´†:** ${testResult.articlesFound} ÁØá

    üìã **APIÂèÉÊï∏:**
    ‚Ä¢ Ëóù‰∫∫‰ª£Á¢º: ${testResult.apiParameters.code}
    ‚Ä¢ ÊéíÂ∫èÊñπÂºè: ${testResult.apiParameters.so}
    ‚Ä¢ È†ÅÊï∏: ${testResult.apiParameters.page}

    ${testResult.sampleArticles && testResult.sampleArticles.length > 0 ? `üìù **ÁØÑ‰æãÊñáÁ´†:**
    ${testResult.sampleArticles.map((article, index) => 
        `${index + 1}. ‰ª£Á¢º: ${article.code} | ÊôÇÈñì: ${article.time} | Ê®ôÈ°å: ${article.title}${article.diaryName ? ` | Diary: ${article.diaryName}` : ''}`
    ).join('\n')}` : ''}

    ‚úÖ Family Club APIÁ≥ªÁµ±ÈÅãË°åÊ≠£Â∏∏ÔºÅ`;
                    
                    await message.reply(testMsg);
                } else {
                    await message.reply(`‚ùå **ÂçöÂÆ¢APIÈÄ£Êé•Ê∏¨Ë©¶Â§±Êïó**

    üîß **Ê™¢Ê∏¨ÊñπÂºè:** ${testResult.method}
    üé≠ **ÁõÆÊ®ôËóù‰∫∫‰ª£Á¢º:** ${testResult.artistCode}
    üì° **APIÁ´ØÈªû:** ${testResult.endpoint}
    ‚ùå **ÈåØË™§:** ${testResult.error}

    üîß **ÊïÖÈöúÊéíÈô§Âª∫Ë≠∞:**
    ‚Ä¢ Ê™¢Êü•Á∂≤Áµ°ÈÄ£Êé•
    ‚Ä¢ Á¢∫Ë™çËóù‰∫∫‰ª£Á¢ºÊòØÂê¶Ê≠£Á¢∫
    ‚Ä¢ Á¢∫Ë™çFamily ClubÁ∂≤Á´ôÊòØÂê¶Ê≠£Â∏∏ÈÅãË°å
    ‚Ä¢ Á®çÂæåÂÜçË©¶`);
                }
            } catch (error) {
                await message.reply(`‚ùå Ê∏¨Ë©¶Âü∑Ë°åÂ§±Êïó: ${error.message}`);
            }
        } else {
            await message.reply('‚ùå ÂçöÂÆ¢Áõ£ÊéßÊú™ÂïüÁî®');
        }
    }

    else if (cmd === '!blog-check') {
        if (blogMonitor) {
            await message.reply('üîç Âü∑Ë°åÊâãÂãïÂçöÂÆ¢Ê™¢Êü•...');
            try {
                // Ë™øÁî®Ê∏¨Ë©¶Ê®°ÂºèÊ™¢Êü•
                const newArticle = await blogMonitor.checkForNewArticles(true);
                
                if (newArticle) {
                    const checkMsg = `üìä **ÊâãÂãïÊ™¢Êü•ÁµêÊûú**

    üÜï **Áï∂ÂâçÊúÄÊñ∞ÊñáÁ´†:**
    üìÑ **‰ª£Á¢º:** ${newArticle.code}
    üìù **Ê®ôÈ°å:** ${newArticle.title}
    üìù **DiaryÂêçÁ®±:** ${newArticle.diaryName}
    üìÖ **ÁôºÂ∏ÉÊôÇÈñì:** ${newArticle.datetimeString}
    üë§ **Ëóù‰∫∫:** ${newArticle.artistName}
    ${newArticle.url ? `üîó **ÈÄ£Áµê:** ${newArticle.url}` : ''}

    üïê **Ê™¢Êü•ÊôÇÈñì:** ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}
    üìä **Áï∂ÂâçË®òÈåÑ:** ${blogMonitor.getLatestRecord()?.articleCode || 'ÁÑ°'}
    üéØ **APIÁãÄÊÖã:** Ê≠£Â∏∏ÈÅãË°å`;

                    await message.reply(checkMsg);
                } else {
                    // Â¶ÇÊûúÊ≤íÊúâËøîÂõûÊñáÁ´†ÔºåÂòóË©¶Áç≤ÂèñÁãÄÊÖã‰ø°ÊÅØ
                    const status = blogMonitor.getStatus();
                    await message.reply(`‚ùå **ÊâãÂãïÊ™¢Êü•ÂÆåÊàê‰ΩÜÁÑ°Ê≥ïÁç≤ÂèñË©≥Á¥∞‰ø°ÊÅØ**

    üìä **Âü∫Êú¨ÁãÄÊÖã:**
    ‚Ä¢ Áõ£ÊéßÁãÄÊÖã: ${status.isMonitoring ? '‚úÖ ÈÅãË°å‰∏≠' : '‚ùå Â∑≤ÂÅúÊ≠¢'}
    ‚Ä¢ Ê™¢Êü•Ê¨°Êï∏: ${status.totalChecks}
    ‚Ä¢ ÁôºÁèæÊñáÁ´†: ${status.articlesFound}
    ‚Ä¢ ÊúÄÂæåÊ™¢Êü•: ${status.lastCheckTime || 'Â∞öÊú™Ê™¢Êü•'}

    üîß **ÊïÖÈöúÊéíÈô§:**
    ‚Ä¢ ‰ΩøÁî® \`!blog-test\` Ê™¢Êü•APIÈÄ£Êé•
    ‚Ä¢ ‰ΩøÁî® \`!blog-status\` Êü•ÁúãË©≥Á¥∞ÁãÄÊÖã`);
                }
            } catch (error) {
                await message.reply(`‚ùå ÊâãÂãïÊ™¢Êü•Â§±Êïó: ${error.message}

    üîß **ÊïÖÈöúÊéíÈô§Âª∫Ë≠∞:**
    ‚Ä¢ Ê™¢Êü•Á∂≤Áµ°ÈÄ£Êé•
    ‚Ä¢ Á¢∫Ë™çËóù‰∫∫‰ª£Á¢ºÈÖçÁΩÆ (ARTIST_CODE)
    ‚Ä¢ ‰ΩøÁî® \`!blog-test\` ÈÄ≤Ë°åË©≥Á¥∞Ë®∫Êñ∑
    ‚Ä¢ ‰ΩøÁî® \`!blog-restart\` ÈáçÊñ∞ÂïüÂãïÁõ£Êéß`);
            }
        } else {
            await message.reply('‚ùå ÂçöÂÆ¢Áõ£ÊéßÊú™ÂïüÁî®');
        }
    }

    else if (cmd === '!blog-restart') {
        if (blogMonitor) {
            await message.reply('üîÑ ÈáçÊñ∞ÂïüÂãïÂçöÂÆ¢Áõ£Êéß...');
            try {
                blogMonitor.stopMonitoring();
                await new Promise(resolve => setTimeout(resolve, 2000)); // Á≠âÂæÖ2Áßí
                
                const success = await blogMonitor.reinitialize();
                if (success) {
                    blogMonitor.startMonitoring();
                    await message.reply('‚úÖ **ÂçöÂÆ¢Áõ£ÊéßÈáçÊñ∞ÂïüÂãïÊàêÂäüÔºÅ**\n\nüìä Â∑≤ÈáçÊñ∞ÂàùÂßãÂåñÊúÄÊñ∞ÊñáÁ´†Ë®òÈåÑ\n‚è∞ ÊÅ¢Âæ©ÂÆöÊúüÊ™¢Êü•ÊéíÁ®ã');
                } else {
                    await message.reply('‚ùå **ÂçöÂÆ¢Áõ£ÊéßÈáçÊñ∞ÂïüÂãïÂ§±Êïó**\n\nÁÑ°Ê≥ïÈáçÊñ∞ÂàùÂßãÂåñÔºåË´ãÊ™¢Êü•APIÈÄ£Êé•ÂíåËóù‰∫∫‰ª£Á¢º');
                }
            } catch (error) {
                await message.reply(`‚ùå ÈáçÊñ∞ÂïüÂãïÂ§±Êïó: ${error.message}`);
            }
        } else {
            await message.reply('‚ùå ÂçöÂÆ¢Áõ£ÊéßÊú™ÂïüÁî®');
        }
    }

    else if (cmd === '!channels') {
        if (Object.keys(config.CHANNEL_CONFIGS).length === 0) {
            await message.reply('‚ö†Ô∏è **Êú™ÈÖçÁΩÆÈ†ªÈÅìÁõ£Êéß**');
            return;
        }

        const channelsInfo = Object.entries(config.CHANNEL_CONFIGS).map(([channelId, channelConfig]) => {
            const stats = unifiedState.discord.channelStats[channelId];
            const phoneIcon = channelConfig.phone_number ? 'üìû' : '‚ùå';
            return `${phoneIcon}**${channelConfig.name || 'Êú™ÂëΩÂêç'}** 
    ÈóúÈçµÂ≠ó: \`${channelConfig.keywords.join(' / ')}\`f
    Áµ±Ë®à: \`${stats.keywordsDetected}\` Ê¨°Ê™¢Ê∏¨Ôºå\`${stats.callsMade}\` Ê¨°ÈÄöË©±`;
        }).join('\n\n');

        let recentPart = '';
        if (unifiedState.discord.lastDetections.length > 0) {
            const recent = unifiedState.discord.lastDetections.slice(-3).reverse()
                .map(d => `\`${d.ÈóúÈçµÂ≠ó}\` Âú® ${d.È†ªÈÅì}`)
                .join(', ');
            recentPart = `\n\n**ÊúÄËøëÊ™¢Ê∏¨:** ${recent}`;
        }

        await message.reply(`üìã **È†ªÈÅìÁõ£ÊéßË©≥ÊÉÖ**\n\n${channelsInfo}${recentPart}`);
    }
    
    // Êõ¥Êñ∞Âπ´Âä©ÂëΩ‰ª§
    else if (cmd === '!help') {
            await message.reply(`ü§ñ **DiscordÈ†ªÈÅìÁõ£Êéß + ÂçöÂÆ¢Áõ£Êéß + InstagramÁõ£ÊéßÊ©üÂô®‰∫∫**

    üìù **ÂçöÂÆ¢Áõ£ÊéßÂëΩ‰ª§**
    \`!blog-status\` - ÂçöÂÆ¢Áõ£ÊéßÁãÄÊÖã
    \`!blog-test\` - Ê∏¨Ë©¶APIÈÄ£Êé•  
    \`!blog-check\` - ÊâãÂãïÊ™¢Êü•Êñ∞ÊñáÁ´†
    \`!blog-restart\` - ÈáçÊñ∞ÂïüÂãïÂçöÂÆ¢Áõ£Êéß

    üì∏ **InstagramÁõ£ÊéßÂëΩ‰ª§**
    \`!ig-status\` - InstagramÁõ£ÊéßË©≥Á¥∞ÁãÄÊÖã
    \`!ig-mode2\` - ÊâãÂãïÂïüÂãïMode2 (ÈÄ≤ÈöéÁõ£Êéß)
    \`!ig-stop-mode2\` - ÂÅúÊ≠¢Mode2
    \`!ig-restart\` - ÈáçÊñ∞ÂïüÂãïInstagramÁõ£Êéß
    \`!ig-test-session\` - Ê™¢Êü•ÁôªÂÖ•ÊÜëË≠âÁãÄÊÖã

    üí¨ **DiscordÁõ£ÊéßÂëΩ‰ª§**
    \`!channels\` - Êü•ÁúãÈ†ªÈÅìÁõ£ÊéßË©≥ÊÉÖ
    \`!status\` - ÂÆåÊï¥Á≥ªÁµ±ÁãÄÊÖã
    \`!help\` - È°ØÁ§∫Ê≠§Âπ´Âä©

    üöÄ **InstagramÁõ£ÊéßË™™Êòé**
    ‚Ä¢ **Mode1**: 24/7ÁÑ°ÁôªÂÖ•Áõ£Êéß (Ë≤ºÊñá„ÄÅBioËÆäÊõ¥)
    ‚Ä¢ **Mode2**: ÊåâÈúÄÁôªÂÖ•Áõ£Êéß (StoryÂÇô‰ªΩ„ÄÅÈÄ≤ÈöéÂäüËÉΩ)
    ‚Ä¢ **Ëá™ÂãïËß∏Áôº**: Ê™¢Ê∏¨Âà∞Story/Áõ¥Êí≠ÈóúÈçµÂ≠óËá™ÂãïÂïüÂãïMode2
    ‚Ä¢ **ÂÆâÂÖ®Ê©üÂà∂**: Mode2ÊúâÂÜ∑ÂçªÊôÇÈñìÈò≤Ê≠¢È†ªÁπÅ‰ΩøÁî®

    üí° **Ëß∏ÁôºÈóúÈçµÂ≠ó**
    ‚Ä¢ \`story\`„ÄÅ\`ÈôêÊôÇÂãïÊÖã\` ‚Üí ÂïüÂãïStoryÂÇô‰ªΩ
    ‚Ä¢ \`live\`„ÄÅ\`Áõ¥Êí≠\` ‚Üí ÂïüÂãïÁõ¥Êí≠Áõ£Êéß  
    ‚Ä¢ \`igÁ∑äÊÄ•\` ‚Üí Á´ãÂç≥ÂïüÂãïMode2

    üåê **WebÈù¢Êùø**: https://tame-amalee-k-326-34061d70.koyeb.app/`);
    }
}



// È†ªÈÅìÂ∞àÁî®APIÂëºÂè´
async function callChannelSpecificAPI(channelId, channelConfig, keyword, originalMessage) {
    if (!channelConfig.api_key || !channelConfig.phone_number) return;
    
    const apiKeyShort = channelConfig.api_key.substring(0, 8);
    
    try {
        const apiUrl = new URL('https://pushcall.me/api/call');
        apiUrl.searchParams.append('api_key', channelConfig.api_key);
        apiUrl.searchParams.append('from', channelConfig.caller_id || '1');
        apiUrl.searchParams.append('to', channelConfig.phone_number.replace('+', ''));
        
        unifiedState.discord.apiUsage[apiKeyShort].totalCalls++;
        unifiedState.discord.apiUsage[apiKeyShort].lastUsed = new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' });
        
        const response = await axios.get(apiUrl.toString(), { timeout: 30000 });
        
        if (response.status === 200) {
            unifiedState.discord.channelStats[channelId].callsMade++;
            unifiedState.discord.channelStats[channelId].lastCallSuccess = new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' });
            unifiedState.discord.apiUsage[apiKeyShort].successCalls++;
            unifiedState.notifications.phoneCallsMade++;
            
            console.log(`‚úÖ [È†ªÈÅìÂ∞àÁî®API] ÈõªË©±ÈÄöÁü•ÊàêÂäü: ${channelConfig.name || channelId}`);
        }
    } catch (error) {
        unifiedState.discord.apiUsage[apiKeyShort].failedCalls++;
        unifiedState.discord.channelStats[channelId].lastCallError = `${error.message}: ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}`;
        
        console.error(`‚ùå [È†ªÈÅìÂ∞àÁî®API] ÈõªË©±ÈÄöÁü•Â§±Êïó: ${channelConfig.name || channelId}`);
        console.error('ÈåØË™§:', error.message);
    }
}

// === Web ÁãÄÊÖãÈù¢ÊùøÊï¥Âêà ===
let webStatusPanel = null;

function initializeWebStatusPanel() {
    try {
        const WebStatusPanel = require('./web_status_panel');
        webStatusPanel = new WebStatusPanel(
            app, 
            unifiedState, 
            config, 
            client, 
            null, // ‰∏çÈúÄË¶ÅInstagramÁõ£ÊéßÂáΩÊï∏
            () => blogMonitor
        );
        console.log('üåê [WebÈù¢Êùø] ÁãÄÊÖãÈù¢ÊùøÂ∑≤ÂàùÂßãÂåñ');
    } catch (error) {
        console.error('‚ùå [WebÈù¢Êùø] ÂàùÂßãÂåñÂ§±Êïó:', error.message);
        setTimeout(() => {
            console.log('üîÑ [WebÈù¢Êùø] ÈñãÂßãÂàùÂßãÂåñÁãÄÊÖãÈù¢Êùø...');
            initializeWebStatusPanel();
        }, 3000);
    }
}


// ÂÅ•Â∫∑Ê™¢Êü•Á´ØÈªû
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'healthy',
        uptime: Math.round((Date.now() - unifiedState.startTime) / 1000),
        channels: Object.keys(config.CHANNEL_CONFIGS).length,
        blog: blogMonitor ? blogMonitor.getStatus().isMonitoring : false,
        discord: unifiedState.botReady
    });
});

// ÂïüÂãïExpressÊúçÂãôÂô®
app.listen(PORT, () => {
    console.log(`üåê HTTP‰º∫ÊúçÂô®ÈÅãË°åÂú® port ${PORT}`);
    console.log(`üïê ÊúçÂãôÂô®ÂïüÂãïÊôÇÈñì (Êó•Êú¨ÊôÇÈñì): ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}`);
});

// === ÈåØË™§ËôïÁêÜ ===
client.on('error', (error) => {
    console.error('‚ùå DiscordÂÆ¢Êà∂Á´ØÈåØË™§:', error.message);
});

client.on('warn', (warning) => {
    console.warn('‚ö†Ô∏è DiscordË≠¶Âëä:', warning);
});

process.on('unhandledRejection', (error) => {
    console.error('‚ùå Êú™ËôïÁêÜÁöÑPromiseÈåØË™§:', error);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Êú™ÊçïÁç≤ÁöÑ‰æãÂ§ñÈåØË™§:', error);
    process.exit(1);
});

// === Êõ¥Êñ∞Áµ±‰∏ÄÁãÄÊÖãÁÆ°ÁêÜ ===
if (instagramMonitor) {
    // Â∞áInstagramÁãÄÊÖãÊ∑ªÂä†Âà∞Áµ±‰∏ÄÁãÄÊÖã‰∏≠
    unifiedState.instagram = {
        configured: true,
        targetUsername: instagramConfig.username,
        mode1Running: false,
        mode2Running: false,
        mode2CooldownUntil: 0,
        totalMode1Checks: 0,
        totalMode2Activations: 0,
        postsDetected: 0,
        storiesBackedUp: 0,
        lastMode1Check: null,
        lastMode2Activation: null,
        sessionValid: false,
        triggerChannels: instagramConfig.triggerChannels
    };
} else {
    unifiedState.instagram = {
        configured: false,
        reason: 'INSTAGRAM_TARGET_USERNAME Êú™Ë®≠ÂÆö'
    };
}

// === ÂÆöÊúüÊõ¥Êñ∞InstagramÁãÄÊÖã ===
if (instagramMonitor) {
    setInterval(() => {
        try {
            const status = instagramMonitor.getStatus();
            
            // Êõ¥Êñ∞Áµ±‰∏ÄÁãÄÊÖã
            unifiedState.instagram.mode1Running = status.mode1.ÈÅãË°åÁãÄÊÖã.includes('‚úÖ');
            unifiedState.instagram.mode2Running = status.mode2.ÈÅãË°åÁãÄÊÖã.includes('üî•');
            unifiedState.instagram.totalMode1Checks = status.mode1.Á∏ΩÊ™¢Êü•Ê¨°Êï∏;
            unifiedState.instagram.totalMode2Activations = status.mode2.ÂïüÂãïÊ¨°Êï∏;
            unifiedState.instagram.postsDetected = status.mode1.Ê™¢Ê∏¨Âà∞ÁöÑË≤ºÊñá;
            unifiedState.instagram.storiesBackedUp = status.mode2.storyÂÇô‰ªΩÊ¨°Êï∏;
            unifiedState.instagram.lastMode1Check = status.mode1.ÊúÄÂæåÊ™¢Êü•ÊôÇÈñì;
            unifiedState.instagram.lastMode2Activation = status.mode2.ÊúÄÂæåÂïüÂãïÊôÇÈñì;
            unifiedState.instagram.sessionValid = status.ÁôªÂÖ•ÊÜëË≠â.ÁãÄÊÖã.includes('‚úÖ');
            
        } catch (error) {
            console.error('‚ùå [ÁãÄÊÖãÊõ¥Êñ∞] InstagramÁãÄÊÖãÊõ¥Êñ∞Â§±Êïó:', error);
        }
    }, 30000); // ÊØè30ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
}

// === Êõ¥Êñ∞ÂÑ™ÈõÖÈóúÈñâËôïÁêÜ ===
process.on('SIGINT', async () => {
    console.log('üõë Êî∂Âà∞ÁµÇÊ≠¢‰ø°ËôüÔºåÊ≠£Âú®ÂÆâÂÖ®ÈóúÈñâ...');
    
    if (blogMonitor) {
        blogMonitor.stopMonitoring();
    }
    
    if (instagramMonitor) {
        await instagramMonitor.stopAll();
    }
    
    if (unifiedState.botReady) {
        await sendNotification('üì¥ Áµ±‰∏ÄÁõ£ÊéßÊ©üÂô®‰∫∫Ê≠£Âú®ÈóúÈñâ...', 'info', 'System');
    }
    
    client.destroy();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë Êî∂Âà∞ÁµÇÊ≠¢‰ø°ËôüÔºåÊ≠£Âú®ÂÆâÂÖ®ÈóúÈñâ...');
    
    if (blogMonitor) {
        blogMonitor.stopMonitoring();
    }
    
    if (instagramMonitor) {
        await instagramMonitor.stopAll();
    }
    
    client.destroy();
    process.exit(0);
});
    

// === ÂïüÂãï Discord Bot ===
console.log('üîê Ê≠£Âú®ÁôªÂÖ•Discord...');
client.login(config.DISCORD_TOKEN).catch(error => {
    console.error('‚ùå Discord BotÁôªÂÖ•Â§±Êïó:', error.message);
    console.error('üîë Ë´ãÊ™¢Êü•DISCORD_TOKENÊòØÂê¶Ê≠£Á¢∫');
    process.exit(1);
});